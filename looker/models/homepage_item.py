# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class HomepageItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HomepageItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'homepage_section_id': 'str',
            'order': 'int',
            'title': 'str',
            'show_title': 'bool',
            'custom_title': 'str',
            'use_custom_title': 'bool',
            'description': 'str',
            'show_description': 'bool',
            'custom_description': 'str',
            'use_custom_description': 'bool',
            'url': 'str',
            'show_url': 'bool',
            'custom_url': 'str',
            'use_custom_url': 'bool',
            'image_url': 'str',
            'show_image': 'bool',
            'custom_image_url': 'str',
            'custom_image_data_base64': 'str',
            'use_custom_image': 'bool',
            'look_id': 'int',
            'dashboard_id': 'int',
            'lookml_dashboard_id': 'str',
            'section_fetch_time': 'float',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'homepage_section_id': 'homepage_section_id',
            'order': 'order',
            'title': 'title',
            'show_title': 'show_title',
            'custom_title': 'custom_title',
            'use_custom_title': 'use_custom_title',
            'description': 'description',
            'show_description': 'show_description',
            'custom_description': 'custom_description',
            'use_custom_description': 'use_custom_description',
            'url': 'url',
            'show_url': 'show_url',
            'custom_url': 'custom_url',
            'use_custom_url': 'use_custom_url',
            'image_url': 'image_url',
            'show_image': 'show_image',
            'custom_image_url': 'custom_image_url',
            'custom_image_data_base64': 'custom_image_data_base64',
            'use_custom_image': 'use_custom_image',
            'look_id': 'look_id',
            'dashboard_id': 'dashboard_id',
            'lookml_dashboard_id': 'lookml_dashboard_id',
            'section_fetch_time': 'section_fetch_time',
            'can': 'can'
        }

        self._id = None
        self._homepage_section_id = None
        self._order = None
        self._title = None
        self._show_title = None
        self._custom_title = None
        self._use_custom_title = None
        self._description = None
        self._show_description = None
        self._custom_description = None
        self._use_custom_description = None
        self._url = None
        self._show_url = None
        self._custom_url = None
        self._use_custom_url = None
        self._image_url = None
        self._show_image = None
        self._custom_image_url = None
        self._custom_image_data_base64 = None
        self._use_custom_image = None
        self._look_id = None
        self._dashboard_id = None
        self._lookml_dashboard_id = None
        self._section_fetch_time = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this HomepageItem.
        Unique Id

        :return: The id of this HomepageItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HomepageItem.
        Unique Id

        :param id: The id of this HomepageItem.
        :type: str
        """
        self._id = id

    @property
    def homepage_section_id(self):
        """
        Gets the homepage_section_id of this HomepageItem.
        Associated Homepage Section

        :return: The homepage_section_id of this HomepageItem.
        :rtype: str
        """
        return self._homepage_section_id

    @homepage_section_id.setter
    def homepage_section_id(self, homepage_section_id):
        """
        Sets the homepage_section_id of this HomepageItem.
        Associated Homepage Section

        :param homepage_section_id: The homepage_section_id of this HomepageItem.
        :type: str
        """
        self._homepage_section_id = homepage_section_id

    @property
    def order(self):
        """
        Gets the order of this HomepageItem.
        An arbitrary integer representing the sort order within the section

        :return: The order of this HomepageItem.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this HomepageItem.
        An arbitrary integer representing the sort order within the section

        :param order: The order of this HomepageItem.
        :type: int
        """
        self._order = order

    @property
    def title(self):
        """
        Gets the title of this HomepageItem.
        The actual title for display

        :return: The title of this HomepageItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this HomepageItem.
        The actual title for display

        :param title: The title of this HomepageItem.
        :type: str
        """
        self._title = title

    @property
    def show_title(self):
        """
        Gets the show_title of this HomepageItem.
        Whether the title should be shown

        :return: The show_title of this HomepageItem.
        :rtype: bool
        """
        return self._show_title

    @show_title.setter
    def show_title(self, show_title):
        """
        Sets the show_title of this HomepageItem.
        Whether the title should be shown

        :param show_title: The show_title of this HomepageItem.
        :type: bool
        """
        self._show_title = show_title

    @property
    def custom_title(self):
        """
        Gets the custom_title of this HomepageItem.
        Custom title entered by the user, if present

        :return: The custom_title of this HomepageItem.
        :rtype: str
        """
        return self._custom_title

    @custom_title.setter
    def custom_title(self, custom_title):
        """
        Sets the custom_title of this HomepageItem.
        Custom title entered by the user, if present

        :param custom_title: The custom_title of this HomepageItem.
        :type: str
        """
        self._custom_title = custom_title

    @property
    def use_custom_title(self):
        """
        Gets the use_custom_title of this HomepageItem.
        Whether the custom title should be used instead of the content title, if the item is associated with content

        :return: The use_custom_title of this HomepageItem.
        :rtype: bool
        """
        return self._use_custom_title

    @use_custom_title.setter
    def use_custom_title(self, use_custom_title):
        """
        Sets the use_custom_title of this HomepageItem.
        Whether the custom title should be used instead of the content title, if the item is associated with content

        :param use_custom_title: The use_custom_title of this HomepageItem.
        :type: bool
        """
        self._use_custom_title = use_custom_title

    @property
    def description(self):
        """
        Gets the description of this HomepageItem.
        The actual description for display

        :return: The description of this HomepageItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this HomepageItem.
        The actual description for display

        :param description: The description of this HomepageItem.
        :type: str
        """
        self._description = description

    @property
    def show_description(self):
        """
        Gets the show_description of this HomepageItem.
        Whether the description should be shown

        :return: The show_description of this HomepageItem.
        :rtype: bool
        """
        return self._show_description

    @show_description.setter
    def show_description(self, show_description):
        """
        Sets the show_description of this HomepageItem.
        Whether the description should be shown

        :param show_description: The show_description of this HomepageItem.
        :type: bool
        """
        self._show_description = show_description

    @property
    def custom_description(self):
        """
        Gets the custom_description of this HomepageItem.
        Custom description entered by the user, if present

        :return: The custom_description of this HomepageItem.
        :rtype: str
        """
        return self._custom_description

    @custom_description.setter
    def custom_description(self, custom_description):
        """
        Sets the custom_description of this HomepageItem.
        Custom description entered by the user, if present

        :param custom_description: The custom_description of this HomepageItem.
        :type: str
        """
        self._custom_description = custom_description

    @property
    def use_custom_description(self):
        """
        Gets the use_custom_description of this HomepageItem.
        Whether the custom description should be used instead of the content description, if the item is associated with content

        :return: The use_custom_description of this HomepageItem.
        :rtype: bool
        """
        return self._use_custom_description

    @use_custom_description.setter
    def use_custom_description(self, use_custom_description):
        """
        Sets the use_custom_description of this HomepageItem.
        Whether the custom description should be used instead of the content description, if the item is associated with content

        :param use_custom_description: The use_custom_description of this HomepageItem.
        :type: bool
        """
        self._use_custom_description = use_custom_description

    @property
    def url(self):
        """
        Gets the url of this HomepageItem.
        The actual url for display

        :return: The url of this HomepageItem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this HomepageItem.
        The actual url for display

        :param url: The url of this HomepageItem.
        :type: str
        """
        self._url = url

    @property
    def show_url(self):
        """
        Gets the show_url of this HomepageItem.
        Whether the url should be shown

        :return: The show_url of this HomepageItem.
        :rtype: bool
        """
        return self._show_url

    @show_url.setter
    def show_url(self, show_url):
        """
        Sets the show_url of this HomepageItem.
        Whether the url should be shown

        :param show_url: The show_url of this HomepageItem.
        :type: bool
        """
        self._show_url = show_url

    @property
    def custom_url(self):
        """
        Gets the custom_url of this HomepageItem.
        Custom url entered by the user, if present

        :return: The custom_url of this HomepageItem.
        :rtype: str
        """
        return self._custom_url

    @custom_url.setter
    def custom_url(self, custom_url):
        """
        Sets the custom_url of this HomepageItem.
        Custom url entered by the user, if present

        :param custom_url: The custom_url of this HomepageItem.
        :type: str
        """
        self._custom_url = custom_url

    @property
    def use_custom_url(self):
        """
        Gets the use_custom_url of this HomepageItem.
        Whether the custom url should be used instead of the content url, if the item is associated with content

        :return: The use_custom_url of this HomepageItem.
        :rtype: bool
        """
        return self._use_custom_url

    @use_custom_url.setter
    def use_custom_url(self, use_custom_url):
        """
        Sets the use_custom_url of this HomepageItem.
        Whether the custom url should be used instead of the content url, if the item is associated with content

        :param use_custom_url: The use_custom_url of this HomepageItem.
        :type: bool
        """
        self._use_custom_url = use_custom_url

    @property
    def image_url(self):
        """
        Gets the image_url of this HomepageItem.
        The actual image_url for display

        :return: The image_url of this HomepageItem.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this HomepageItem.
        The actual image_url for display

        :param image_url: The image_url of this HomepageItem.
        :type: str
        """
        self._image_url = image_url

    @property
    def show_image(self):
        """
        Gets the show_image of this HomepageItem.
        Whether the image_url should be shown

        :return: The show_image of this HomepageItem.
        :rtype: bool
        """
        return self._show_image

    @show_image.setter
    def show_image(self, show_image):
        """
        Sets the show_image of this HomepageItem.
        Whether the image_url should be shown

        :param show_image: The show_image of this HomepageItem.
        :type: bool
        """
        self._show_image = show_image

    @property
    def custom_image_url(self):
        """
        Gets the custom_image_url of this HomepageItem.
        Custom image_url entered by the user, if present

        :return: The custom_image_url of this HomepageItem.
        :rtype: str
        """
        return self._custom_image_url

    @custom_image_url.setter
    def custom_image_url(self, custom_image_url):
        """
        Sets the custom_image_url of this HomepageItem.
        Custom image_url entered by the user, if present

        :param custom_image_url: The custom_image_url of this HomepageItem.
        :type: str
        """
        self._custom_image_url = custom_image_url

    @property
    def custom_image_data_base64(self):
        """
        Gets the custom_image_data_base64 of this HomepageItem.
        (Write-only) base64 encoded image data

        :return: The custom_image_data_base64 of this HomepageItem.
        :rtype: str
        """
        return self._custom_image_data_base64

    @custom_image_data_base64.setter
    def custom_image_data_base64(self, custom_image_data_base64):
        """
        Sets the custom_image_data_base64 of this HomepageItem.
        (Write-only) base64 encoded image data

        :param custom_image_data_base64: The custom_image_data_base64 of this HomepageItem.
        :type: str
        """
        self._custom_image_data_base64 = custom_image_data_base64

    @property
    def use_custom_image(self):
        """
        Gets the use_custom_image of this HomepageItem.
        Whether the custom image should be used instead of the content image, if the item is associated with content

        :return: The use_custom_image of this HomepageItem.
        :rtype: bool
        """
        return self._use_custom_image

    @use_custom_image.setter
    def use_custom_image(self, use_custom_image):
        """
        Sets the use_custom_image of this HomepageItem.
        Whether the custom image should be used instead of the content image, if the item is associated with content

        :param use_custom_image: The use_custom_image of this HomepageItem.
        :type: bool
        """
        self._use_custom_image = use_custom_image

    @property
    def look_id(self):
        """
        Gets the look_id of this HomepageItem.
        Look to base this item on

        :return: The look_id of this HomepageItem.
        :rtype: int
        """
        return self._look_id

    @look_id.setter
    def look_id(self, look_id):
        """
        Sets the look_id of this HomepageItem.
        Look to base this item on

        :param look_id: The look_id of this HomepageItem.
        :type: int
        """
        self._look_id = look_id

    @property
    def dashboard_id(self):
        """
        Gets the dashboard_id of this HomepageItem.
        Dashboard to base this item on

        :return: The dashboard_id of this HomepageItem.
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """
        Sets the dashboard_id of this HomepageItem.
        Dashboard to base this item on

        :param dashboard_id: The dashboard_id of this HomepageItem.
        :type: int
        """
        self._dashboard_id = dashboard_id

    @property
    def lookml_dashboard_id(self):
        """
        Gets the lookml_dashboard_id of this HomepageItem.
        LookML Dashboard to base this item on

        :return: The lookml_dashboard_id of this HomepageItem.
        :rtype: str
        """
        return self._lookml_dashboard_id

    @lookml_dashboard_id.setter
    def lookml_dashboard_id(self, lookml_dashboard_id):
        """
        Sets the lookml_dashboard_id of this HomepageItem.
        LookML Dashboard to base this item on

        :param lookml_dashboard_id: The lookml_dashboard_id of this HomepageItem.
        :type: str
        """
        self._lookml_dashboard_id = lookml_dashboard_id

    @property
    def section_fetch_time(self):
        """
        Gets the section_fetch_time of this HomepageItem.
        Number of seconds it took to fetch the section this item is in

        :return: The section_fetch_time of this HomepageItem.
        :rtype: float
        """
        return self._section_fetch_time

    @section_fetch_time.setter
    def section_fetch_time(self, section_fetch_time):
        """
        Sets the section_fetch_time of this HomepageItem.
        Number of seconds it took to fetch the section this item is in

        :param section_fetch_time: The section_fetch_time of this HomepageItem.
        :type: float
        """
        self._section_fetch_time = section_fetch_time

    @property
    def can(self):
        """
        Gets the can of this HomepageItem.
        Operations the current user is able to perform on this object

        :return: The can of this HomepageItem.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this HomepageItem.
        Operations the current user is able to perform on this object

        :param can: The can of this HomepageItem.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

